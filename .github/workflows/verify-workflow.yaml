name: Verify

# Controls when the action will run.
on:
  workflow_call:
    secrets:
      GITU_CONFIG:
        required: true
      GIT_ORG:
        required: false
      CA_CERT:
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  verify:
    runs-on: ubuntu-latest
    container: quay.io/cloudnativetoolkit/terraform:v1.2

    strategy:
      matrix:
        testcase:
          - github.com
          - github.ibm.com
          - us-south.git.cloud.ibm.com
          - bitbucket.org
          - dev.azure.com
          - gitea-gitea.apps.rbe2qs.ocp-azure.ibm-software-everywhere.dev
      fail-fast: false

    env:
      HOME: /home/devops

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - id: variables
        name: Set up variables
        env:
          GIT_ORG: ${{ secrets.GIT_ORG }}
          GITU_CONFIG: ${{ secrets.GITU_CONFIG }}
          GIT_PROJECT: ${{ secrets.GIT_PROJECT }}
        shell: bash
        run: |
          repo=$(echo "${GITHUB_REPOSITORY}" | sed -E "s~.*/[^-]+-(.*)~\1a~g")
          echo "Repo: $repo"
          echo "::set-output name=repo::$repo"

          org="${GIT_ORG}"
          echo "Org: $org"
          echo "::set-output name=org::$org"
          
          project="${GIT_PROJECT:-Test}"
          echo "Project: $project"
          echo "::set-output name=project::$project"          
          
          username=$(echo "${GITU_CONFIG}" |  yq '.credentials[] | select(.host == "${{ matrix.testcase }}") | .username')
          echo "Username: $username"
          if [[ -z "${username}" ]]; then
            echo "Username config missing" >&2
            exit 1
          fi
          echo "::set-output name=username::$username"
          
          token=$(echo "${GITU_CONFIG}" |  yq '.credentials[] | select(.host == "${{ matrix.testcase }}") | .token')
          echo "Token: xxx"
          if [[ -z "${token}" ]]; then
            echo "Token config missing" >&2
            exit 1
          fi
          echo "::set-output name=token::$token"
          
          ca_cert=$(echo "${GITU_CONFIG}" |  yq '.credentials[] | select(.host == "${{ matrix.testcase }}") | .caCert')
          echo "Ca cert: ${ca_cert}"
          echo "::set-output name=ca-cert::$ca_cert"
          
          if [[ -n "${ca_cert}" ]]; then
            echo "${{ secrets.CA_CERT }}" > "${ca_cert}"
          fi

      - name: Verify deploy on ${{ matrix.testcase }}
        uses: cloud-native-toolkit/action-module-verify-deploy@main
        with:
          clusterId: "no-config"
          validateDeployScript: .github/scripts/validate-deploy.sh
        env:
          TF_VAR_git_host: ${{ matrix.testcase }}
          TF_VAR_git_username: ${{ steps.variables.outputs.username }}
          TF_VAR_git_token: ${{ steps.variables.outputs.token }}
          TF_VAR_git_org: ${{ steps.variables.outputs.org }}
          TF_VAR_git_repo: ${{ steps.variables.outputs.repo }}
          TF_VAR_git_project: ${{ steps.variables.outputs.project }}
          TF_VAR_ca_cert_file: ${{ steps.variables.outputs.ca-cert }}

      - name: Verify destroy on ${{ matrix.testcase }}
        uses: cloud-native-toolkit/action-module-verify-destroy@main
        if: ${{ always() }}
        with:
          clusterId: "no-config"
        env:
          TF_VAR_git_host: ${{ matrix.testcase }}
          TF_VAR_git_username: ${{ steps.variables.outputs.username }}
          TF_VAR_git_token: ${{ steps.variables.outputs.token }}
          TF_VAR_git_org: ${{ steps.variables.outputs.org }}
          TF_VAR_git_repo: ${{ steps.variables.outputs.repo }}
          TF_VAR_git_project: ${{ steps.variables.outputs.project }}
          TF_VAR_ca_cert_file: ${{ steps.variables.outputs.ca-cert }}
